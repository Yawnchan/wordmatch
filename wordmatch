public class WordMatch {

    private String secret;

    public WordMatch(String word) {
        // Implementation not shown
        secret = word;
    }

    /**
     * Returns a score for guess, as described in the directions.
     * Precondition: 0 < guess.length() <= secret.length()
     */
    public int scoreGuess(String guess) {
        // Part A implementation
        int score = 0;

        for (int i = 0; i <= secret.length() - guess.length(); i++) {
            if (secret.substring(i, i + guess.length()).equals(guess)) {
                score++;
            }
        }

        return score * guess.length() * guess.length();
    }

    /**
     * Returns the better of two guesses, as determined by scoreGuess and the rules for a tie-breaker
     * that are described in the directions.
     * Precondition: guess1 and guess2 contain all lowercase letters.
     * guess1 is not the same as guess2.
     */
    public String findBetterGuess(String guess1, String guess2) {
        // Part B implementation
        int score1 = scoreGuess(guess1);
        int score2 = scoreGuess(guess2);

        if (score1 != score2) {
            return (score1 > score2) ? guess1 : guess2;
        } else {
            return (guess1.compareTo(guess2) > 0) ? guess1 : guess2;
        }
    }
}
